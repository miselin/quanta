It's a Lisp if, semantics-wise:

- [x] it divides objects into conses and atoms; conses have car and cdr slots;
- [x] functions of the same names exist to access these slots.
- [x] has a symbol type distinct from string;
- [x] the empty list is the symbol nil and thus an atom.
- [x] non-empty lists are created from conses, linked through car;
- [x] these data structures are not only manipulated by programs, but are combined to represent their syntax.

and program syntax-wise:
- [x] program is made of expressions, which are either atoms or lists
- [x] atoms that are symbols denote variables, except for self-evaluating symbols like t and nil.
- [x] lists are compound expressions denoting operator applications: the first element is a symbol denoting an operator, macro operator or function; the rest of the syntax is arguments

and read syntax-wise:
- [ ] objects have a printed notation that the machine understands and also reproduces;
- [x] symbols are represented by identifier tokens, and are interned, so that two or more occurrences denote the same object;
- [x] conses are represented as the dotted notation (<car> . <cdr>);
- [x] (<car> . nil) can be condensed to (<car>);
- [x] (<car0> . (<car1> ...)) can be condensed to (<car0> <car1> ...) and usually is, including by the printer.

furhermore, certain library functions and operators are present:
- [x] lambda, eval, let, defun or define and various others.


-----

Special forms
- quote (+ ' sugar)
- lambda
- begin
- define
- defun
- set!
- let
- cond

Primitives
- +, -, /, *
- eq?
- cons
- car
- cdr
- atom?
- nil?
- apply
- eval
- print
